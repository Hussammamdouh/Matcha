rules_version = 'v2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isModeratorOrAdmin() {
      return isAuthenticated() && 
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['moderator', 'admin', 'super_admin'];
    }
    
    function isNotBanned() {
      return isAuthenticated() && 
             (!firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) ||
              !firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isBanned);
    }
    
    function isNotSuspended() {
      return isAuthenticated() && 
             (!firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) ||
              !firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isSuspended);
    }
    
    function isActiveUser() {
      return isNotBanned() && isNotSuspended();
    }
    
    // Avatar images - owner only
    match /avatars/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                    request.resource.size < 5 * 1024 * 1024 && // 5MB max
                    request.resource.contentType.matches('image/.*');
      allow delete: if isOwner(userId);
    }
    
    // Community images - public read, community moderators can write
    match /communities/{communityId}/images/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAuthenticated() && 
                    firestore.get(/databases/(default)/documents/communities/$(communityId)).data.modIds[request.auth.uid] == true &&
                    request.resource.size < 10 * 1024 * 1024 && // 10MB max
                    request.resource.contentType.matches('image/.*');
      allow delete: if isAuthenticated() && 
                    firestore.get(/databases/(default)/documents/communities/$(communityId)).data.modIds[request.auth.uid] == true;
    }
    
    // Post media - public read, post author can write
    match /posts/{postId}/media/{fileName} {
      allow read: if true; // Public read access
      allow write: if isActiveUser() && 
                    firestore.get(/databases/(default)/documents/posts/$(postId)).data.authorId == request.auth.uid &&
                    request.resource.size < 25 * 1024 * 1024 && // 25MB max
                    request.resource.contentType.matches('(image|video)/.*');
      allow delete: if isAuthenticated() && 
                    (firestore.get(/databases/(default)/documents/posts/$(postId)).data.authorId == request.auth.uid ||
                     isModeratorOrAdmin());
    }
    
    // Men-review original images - creator only, not readable
    match /men/subjects/{subjectId}/original/{fileName} {
      allow read: if false; // Original images are not readable by clients
      allow write: if isActiveUser() && 
                    firestore.get(/databases/(default)/documents/men/subjects/$(subjectId)).data.creatorId == request.auth.uid &&
                    request.resource.size < 50 * 1024 * 1024 && // 50MB max
                    request.resource.contentType.matches('image/.*');
      allow delete: if isAuthenticated() && 
                    (firestore.get(/databases/(default)/documents/men/subjects/$(subjectId)).data.creatorId == request.auth.uid ||
                     isModeratorOrAdmin());
    }
    
    // Men-review processed images - public read, server only write
    match /men/subjects/{subjectId}/processed/{fileName} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can write processed images
      allow delete: if false; // Processed images cannot be deleted by clients
    }
    
    // Chat media - conversation participants only
    match /chat/conversations/{conversationId}/media/{fileName} {
      allow read: if isAuthenticated() && 
                   firestore.get(/databases/(default)/documents/chat/conversations/$(conversationId)).data.participantIds[request.auth.uid] == true;
      allow write: if isActiveUser() && 
                    firestore.get(/databases/(default)/documents/chat/conversations/$(conversationId)).data.participantIds[request.auth.uid] == true &&
                    request.resource.size < 10 * 1024 * 1024 && // 10MB max
                    request.resource.contentType.matches('(image|video|audio)/.*');
      allow delete: if isAuthenticated() && 
                    firestore.get(/databases/(default)/documents/chat/conversations/$(conversationId)).data.participantIds[request.auth.uid] == true;
    }
    
    // Chat message attachments - conversation participants only
    match /chat/conversations/{conversationId}/messages/{messageId}/attachments/{fileName} {
      allow read: if isAuthenticated() && 
                   firestore.get(/databases/(default)/documents/chat/conversations/$(conversationId)).data.participantIds[request.auth.uid] == true;
      allow write: if isActiveUser() && 
                    firestore.get(/databases/(default)/documents/chat/conversations/$(conversationId)).data.participantIds[request.auth.uid] == true &&
                    request.resource.size < 5 * 1024 * 1024 && // 5MB max
                    request.resource.contentType.matches('(image|video|audio|application)/.*');
      allow delete: if isAuthenticated() && 
                    firestore.get(/databases/(default)/documents/chat/conversations/$(conversationId)).data.participantIds[request.auth.uid] == true;
    }
    
    // System files - server only
    match /system/{fileName} {
      allow read, write: if false; // Server-only access
    }
    
    // Admin exports - admin only
    match /admin/exports/{fileName} {
      allow read: if isModeratorOrAdmin();
      allow write: if false; // Only server can write exports
      allow delete: if isModeratorOrAdmin();
    }
    
    // Temporary uploads - authenticated users only, with size limits
    match /temp/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isActiveUser() && 
                    request.resource.size < 50 * 1024 * 1024 && // 50MB max
                    request.resource.contentType.matches('(image|video|audio|application)/.*');
      allow delete: if isOwner(userId);
    }
    
    // Backup files - server only
    match /backups/{fileName} {
      allow read, write: if false; // Server-only access
    }
    
    // Log files - server only
    match /logs/{fileName} {
      allow read, write: if false; // Server-only access
    }
    
    // Default rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}



